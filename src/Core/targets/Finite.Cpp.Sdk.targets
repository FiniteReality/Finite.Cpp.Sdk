<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    Microsoft.Common.CurrentVersion.targets defines Windows variants of these.
    Since we're overriding them, we have to make sure they weren't
    intentionally overriden beforehand.
  -->
  <PropertyGroup Condition="'$(_OverridenTargetExt)' != 'true' and '$(OS)' == 'OSX'">
    <TargetExt Condition="'$(OutputType)' == 'exe'"></TargetExt>
    <TargetExt Condition="'$(OutputType)' == 'library'">.dylib</TargetExt>
  </PropertyGroup>

  <PropertyGroup Condition="'$(_OverridenTargetExt)' != 'true' and '$(OS)' == 'Unix'">
    <TargetExt Condition="'$(OutputType)' == 'exe'"></TargetExt>
    <TargetExt Condition="'$(OutputType)' == 'library'">.so</TargetExt>
  </PropertyGroup>

  <PropertyGroup>
    <!-- C/C++ projects cannot produce .NET reference assemblies -->
    <ProduceReferenceAssembly>false</ProduceReferenceAssembly>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)Finite.Cpp.Sdk.DefaultItems.targets" />

  <!-- Needed by Microsoft.Common.CurrentVersion.targets -->
  <Target Name="CreateManifestResourceNames" />

  <PropertyGroup>
    <CompileDependsOn>
      $(CompileDependsOn)
      BeforeLink;
      <!--_TimeStampBeforeLink;-->
      _GenerateLinkDependencyCache;
      CoreLink;
      <!--_TimeStampAfterLink;-->
      AfterLink;
    </CompileDependsOn>
  </PropertyGroup>

  <Target Name="CoreCompile"
    Inputs="$(MSBuildAllProjects);@(Compile);"
    Outputs="@(Compile->'%(_LinkOutputName)')">

    <ClangCompile
      OutputDirectory="$(IntermediateOutputPath)"
      OutputFileExtension="$(DefaultIntermediateExtension)"
      SourceFile="%(Compile.FullPath)">
      <Output TaskParameter="OutputFile" ItemName="FileWrites" />
      <Output TaskParameter="OutputFile" ItemName="Link" />
    </ClangCompile>
  </Target>

  <Target Name="CoreLink"
    DependsOnTargets="CoreCompile"
    Inputs="$(MSBuildAllProjects);@(Link)"
    Outputs="@(IntermediateAssembly)">

    <Exec Command="clang @(Link, ' ') -o @(IntermediateAssembly)" />

    <ItemGroup>
      <FileWrites Include="@(IntermediateAssembly)" />
    </ItemGroup>
  </Target>

  <Target Name="BeforeLink" />

  <Target Name="AfterLink" />

  <Target Name="_GenerateLinkDependencyCache" Condition="'$(DesignTimeBuild)' != 'true' and '$(BuildingProject)' == 'true'" DependsOnTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <CustomAdditionalLinkInputs Include="$(IntermediateOutputPath)$(MSBuildProjectFile).CoreLinkInputs.cache" />
      <CoreLinkCache Include="@(Link)" />
      <CoreLinkCache Include="@(ReferencePath)" />
      <CoreLinkCache Include="$(DefineConstants)" />
    </ItemGroup>

    <Hash
      ItemsToHash="@(CoreLinkCache)"
      IgnoreCase="$([MSBuild]::ValueOrDefault(`$(CoreLinkCacheIgnoreCase)`, `true`))">
      <Output TaskParameter="HashResult" PropertyName="CoreLinkDependencyHash" />
    </Hash>

    <WriteLinesToFile Lines="$(CoreLinkDependencyHash)" File="$(IntermediateOutputPath)$(MSBuildProjectFile).CoreLinkInputs.cache" Overwrite="True" WriteOnlyWhenDifferent="True" />

    <ItemGroup>
      <FileWrites Include="$(IntermediateOutputPath)$(MSBuildProjectFile).CoreLinkInputs.cache" />
    </ItemGroup>
  </Target>

</Project>
